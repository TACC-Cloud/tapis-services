/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.jobs.gen.jooq.tables;


import edu.utexas.tacc.tapis.jobs.gen.jooq.Indexes;
import edu.utexas.tacc.tapis.jobs.gen.jooq.Keys;
import edu.utexas.tacc.tapis.jobs.gen.jooq.Public;
import edu.utexas.tacc.tapis.jobs.gen.jooq.tables.records.JobRecoveryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobRecovery extends TableImpl<JobRecoveryRecord> {

    private static final long serialVersionUID = -339113297;

    /**
     * The reference instance of <code>public.job_recovery</code>
     */
    public static final JobRecovery JOB_RECOVERY = new JobRecovery();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobRecoveryRecord> getRecordType() {
        return JobRecoveryRecord.class;
    }

    /**
     * The column <code>public.job_recovery.id</code>.
     */
    public final TableField<JobRecoveryRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('job_recovery_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.job_recovery.tenant_id</code>.
     */
    public final TableField<JobRecoveryRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * The column <code>public.job_recovery.condition_code</code>.
     */
    public final TableField<JobRecoveryRecord, String> CONDITION_CODE = createField(DSL.name("condition_code"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.job_recovery.tester_type</code>.
     */
    public final TableField<JobRecoveryRecord, String> TESTER_TYPE = createField(DSL.name("tester_type"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.job_recovery.tester_parms</code>.
     */
    public final TableField<JobRecoveryRecord, String> TESTER_PARMS = createField(DSL.name("tester_parms"), org.jooq.impl.SQLDataType.VARCHAR(2048).nullable(false), this, "");

    /**
     * The column <code>public.job_recovery.policy_type</code>.
     */
    public final TableField<JobRecoveryRecord, String> POLICY_TYPE = createField(DSL.name("policy_type"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.job_recovery.policy_parms</code>.
     */
    public final TableField<JobRecoveryRecord, String> POLICY_PARMS = createField(DSL.name("policy_parms"), org.jooq.impl.SQLDataType.VARCHAR(2048).nullable(false), this, "");

    /**
     * The column <code>public.job_recovery.num_attempts</code>.
     */
    public final TableField<JobRecoveryRecord, Integer> NUM_ATTEMPTS = createField(DSL.name("num_attempts"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.job_recovery.next_attempt</code>.
     */
    public final TableField<JobRecoveryRecord, LocalDateTime> NEXT_ATTEMPT = createField(DSL.name("next_attempt"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.job_recovery.created</code>.
     */
    public final TableField<JobRecoveryRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.job_recovery.last_updated</code>.
     */
    public final TableField<JobRecoveryRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.job_recovery.tester_hash</code>.
     */
    public final TableField<JobRecoveryRecord, String> TESTER_HASH = createField(DSL.name("tester_hash"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>public.job_recovery</code> table reference
     */
    public JobRecovery() {
        this(DSL.name("job_recovery"), null);
    }

    /**
     * Create an aliased <code>public.job_recovery</code> table reference
     */
    public JobRecovery(String alias) {
        this(DSL.name(alias), JOB_RECOVERY);
    }

    /**
     * Create an aliased <code>public.job_recovery</code> table reference
     */
    public JobRecovery(Name alias) {
        this(alias, JOB_RECOVERY);
    }

    private JobRecovery(Name alias, Table<JobRecoveryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobRecovery(Name alias, Table<JobRecoveryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JobRecovery(Table<O> child, ForeignKey<O, JobRecoveryRecord> key) {
        super(child, key, JOB_RECOVERY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOB_RECOVERY_NEXT_ATTEMPT_IDX, Indexes.JOB_RECOVERY_TENANT_HASH_IDX);
    }

    @Override
    public Identity<JobRecoveryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOB_RECOVERY;
    }

    @Override
    public UniqueKey<JobRecoveryRecord> getPrimaryKey() {
        return Keys.JOB_RECOVERY_PKEY;
    }

    @Override
    public List<UniqueKey<JobRecoveryRecord>> getKeys() {
        return Arrays.<UniqueKey<JobRecoveryRecord>>asList(Keys.JOB_RECOVERY_PKEY);
    }

    @Override
    public JobRecovery as(String alias) {
        return new JobRecovery(DSL.name(alias), this);
    }

    @Override
    public JobRecovery as(Name alias) {
        return new JobRecovery(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobRecovery rename(String name) {
        return new JobRecovery(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobRecovery rename(Name name) {
        return new JobRecovery(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, String, String, String, Integer, LocalDateTime, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
