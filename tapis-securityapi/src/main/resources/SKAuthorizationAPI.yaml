openapi: 3.0.1
info:
  title: Tapis Security API
  description: The Tapis Security API provides access to the Tapis Security Kernel
    authorization and secrets facilities.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: https://opensource.org/licenses/BSD-3-Clause
  version: "0.1"
externalDocs:
  description: Tapis Home
  url: https://tacc-cloud.readthedocs.io/projects/agave
servers:
- url: http://localhost:8080/security
  description: Local test environment
  variables: {}
security:
- TapisJWT: []
tags:
- name: role
  description: manage roles and permissions
- name: user
  description: assign roles and permissions to users
- name: general
  description: informational endpoints
paths:
  /v3/role:
    get:
      tags:
      - role
      description: Get the names of all roles in the tenant in alphabetic order.
      operationId: getRoleNames
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: List of role names returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
    post:
      tags:
      - role
      description: Create a role using a request body.  Role names are case sensitive,
        alpha-numeric strings that can also contain underscores.  Role names must
        start with an alphbetic character and can be no more than 60 characters in
        length.  The desciption can be no more than 2048 characters long.  If the
        role already exists, this request has no effect.
      operationId: createRole
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqCreateRole'
      responses:
        200:
          description: Role existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        201:
          description: Role created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/role/{roleName}:
    get:
      tags:
      - role
      description: Get the named role's definition.
      operationId: getRoleByName
      parameters:
      - name: roleName
        in: path
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Named role returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkRole'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
    delete:
      tags:
      - role
      description: Delete the named role.
      operationId: deleteRoleByName
      parameters:
      - name: roleName
        in: path
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Role deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/role/updateName/{roleName}:
    post:
      tags:
      - role
      description: Update an existing role using a request body.  Role names are case
        sensitive, alphanumeric strings that can contain underscores but must begin
        with an alphabetic character.  The limit on role name is 60 characters.
      operationId: updateRoleName
      parameters:
      - name: roleName
        in: path
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleName'
      responses:
        200:
          description: Role name updated.
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/role/updateDesc/{roleName}:
    post:
      tags:
      - role
      description: Update an existing role using a request body.  The size limit on
        a description is 2048 characters.
      operationId: updateRoleDescription
      parameters:
      - name: roleName
        in: path
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleDescription'
      responses:
        200:
          description: Role description updated.
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/role/addPerm:
    post:
      tags:
      - role
      description: |-
        Add a permission to an existing role using a request body.  If the permission already exists, then the request has no effect and the change count returned is zero. Otherwise, the permission is added and the change count is one.  Permissions are case-sensitive strings that follow the format defined by Apache Shiro (https://shiro.apache.org/permissions.html).  This format defines any number of colon-separated (:) parts, with the possible use of asterisks (*) as wildcards and commas (,) as aggregators.  Here are two example permission strings:

            system:MyTenant:read,write:system1
            system:MyTenant:create,read,write,delete:*

        See the Shiro documentation for further details.  Note that the three reserved characters, [: * ,], cannot appear in the text of any part.  It's the application's responsibility to escape those characters in a manner that is safe in the application's domain.
      operationId: addRolePermission
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqAddRolePermission'
      responses:
        200:
          description: Permission assigned to role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/role/removePerm:
    post:
      tags:
      - role
      description: Remove a permission from a role using a request body.
      operationId: removeRolePermission
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqRemoveRolePermission'
      responses:
        200:
          description: Permission removed from role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/role/addChild:
    post:
      tags:
      - role
      description: Add a child role to another role using a request body.  If the
        child already exists, then the request has no effect and the change count
        returned is zero. Otherwise, the child is added and the change count is one.
      operationId: addChildRole
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqAddChildRole'
      responses:
        200:
          description: Child assigned to parent role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/role/removeChild:
    post:
      tags:
      - role
      description: Remove a child role from a parent role using a request body.
      operationId: removeChildRole
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqRemoveChildRole'
      responses:
        200:
          description: Child removed from parent role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/role/replacePathPrefix:
    post:
      tags:
      - role
      description: |-
        Replace the text in a permission specification when its last component defines an *extended path attribute*.  Extended path attributes enhance the standard Shiro matching algorithm with one that treats designated components in a permission specification as a path name, such as a posix file or directory path name.  This request is useful when files or directories have been renamed or moved and their authorizations need to be adjusted.  Consider, for example, permissions that conform to the following specification:

              store:tenantId:op:systemId:path

        By convention, the last component is an extended path attribute whose content can be changed by replacePathPrefix requests.  Specifically, paths that begin with the oldPrefix will have that prefix replaced with the newPrefix value.  Replacement only occurs on permissions that also match the schema and oldSystemId parameter values.  The systemId is required to be the next to last attribute and immediately preceding the path attribute.  The oldSystemId is replaced with the newSystemId when a match is found.  If a roleName is provided, then replacement is limited to permissions defined only in that role.  Otherwise, permissions in all roles that meet the other matching criteria will be considered.

        Use a request body to pass parameters on this request.  The response indicates the number of changed permission specifications.
      operationId: replacePathPrefix
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqReplacePathPrefix'
      responses:
        200:
          description: Path prefixes replaced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/hello:
    get:
      tags:
      - general
      description: Connectivity test.
      operationId: getDummy
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Message received.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/hasRole:
    post:
      tags:
      - user
      description: Check whether a user has been assigned the specified role, either
        directly or transitively.
      operationId: hasRole
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserHasRole'
      responses:
        200:
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/removeRole:
    post:
      tags:
      - user
      description: Remove a previously granted role from a user.
      operationId: removeRole
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqRemoveUserRole'
      responses:
        200:
          description: Role removed from user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user:
    get:
      tags:
      - user
      description: Get the names of all users in the tenant that have been granted
        a role or permission.
      operationId: getUserNames
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Sorted list of user names.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/roles/{user}:
    get:
      tags:
      - user
      description: Get the roles assigned to a user, including those assigned transively.
      operationId: getUserRoles
      parameters:
      - name: user
        in: path
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: List of roles names assigned to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/perms/{user}:
    get:
      tags:
      - user
      description: Get the permissions assigned to a user, including those assigned
        transively.
      operationId: getUserPerms
      parameters:
      - name: user
        in: path
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: List of permissions assigned to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/grantRole:
    post:
      tags:
      - user
      description: Grant a user the specified role.
      operationId: grantRole
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqGrantUserRole'
      responses:
        200:
          description: Role assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/user/grantRoleWithPerm:
    post:
      tags:
      - user
      description: Grant a user the specified role containing the specified permission.  This
        compound request first adds the permission to the role if it is not already
        a member of the role and then assigns the role to the user.  The change count
        returned can range from zero to two depending on how many insertions were
        actually required.
      operationId: grantRoleWithPermission
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqGrantUserRoleWithPermission'
      responses:
        200:
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/user/hasRoleAny:
    post:
      tags:
      - user
      description: Check whether a user has been assigned any of the roles specified
        in the request body.
      operationId: hasRoleAny
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserHasRoleMulti'
      responses:
        200:
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/hasRoleAll:
    post:
      tags:
      - user
      description: Check whether a user has been assigned all of the roles specified
        in the request body.
      operationId: hasRoleAll
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserHasRoleMulti'
      responses:
        200:
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/isPermitted:
    post:
      tags:
      - user
      description: Check whether specified permission matches a permission assigned
        to the user, either directly or transitively.
      operationId: isPermitted
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserIsPermitted'
      responses:
        200:
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/isPermittedAny:
    post:
      tags:
      - user
      description: Check whether a user's permissions satisfy any of the permission
        specifications contained in the request body.
      operationId: isPermittedAny
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserIsPermittedMulti'
      responses:
        200:
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/isPermittedAll:
    post:
      tags:
      - user
      description: Check whether a user's permissions satisfy all of the permission
        specifications contained in the request body.
      operationId: isPermittedAll
      parameters:
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReqUserIsPermittedMulti'
      responses:
        200:
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
  /v3/user/withRole/{roleName}:
    get:
      tags:
      - user
      description: Get all users assigned a role.  The role must exist in the tenant.
      operationId: getUsersWithRole
      parameters:
      - name: roleName
        in: path
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Sorted list of users assigned a role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        400:
          description: Input error.
        401:
          description: Not authorized.
        404:
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        500:
          description: Server error.
  /v3/user/withPermission/{permSpec}:
    get:
      tags:
      - user
      description: |
        Get all users assigned a permission.  The permSpec parameter is a permission specification that uses colons as separators, the asterisk as a wildcard character and commas to define lists.  Here are examples of permission specifications:

            system:mytenant:read:mysystem
            system:mytenant:*:mysystem
            system:mytenant
            files:mytenant:read,write:mysystems
        This method recognizes the percent sign (%) as a string wildcard only in the context of database searching.  If a percent sign appears in the permSpec it is interpreted as a zero or more character wildcard.  For example, the following specification would match the first three of the above example specifications but not the fourth:

            system:mytenant:%
      operationId: getUsersWithPermission
      parameters:
      - name: permSpec
        in: path
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Sorted list of users assigned a permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        400:
          description: Input error.
        401:
          description: Not authorized.
        500:
          description: Server error.
components:
  schemas:
    RespResourceUrl:
      type: object
      properties:
        url:
          type: string
    ReqCreateRole:
      type: object
      properties:
        roleName:
          type: string
        description:
          type: string
    RespNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    SkRole:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        created:
          type: string
        createdby:
          type: string
        updated:
          type: string
        updatedby:
          type: string
    RespName:
      type: object
      properties:
        name:
          type: string
    RespChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    ReqUpdateRoleName:
      type: object
      properties:
        newRoleName:
          type: string
    ReqUpdateRoleDescription:
      type: object
      properties:
        description:
          type: string
    ReqAddRolePermission:
      type: object
      properties:
        roleName:
          type: string
        permSpec:
          type: string
    ReqRemoveRolePermission:
      type: object
      properties:
        roleName:
          type: string
        permSpec:
          type: string
    ReqAddChildRole:
      type: object
      properties:
        parentRoleName:
          type: string
        childRoleName:
          type: string
    ReqRemoveChildRole:
      type: object
      properties:
        parentRoleName:
          type: string
        childRoleName:
          type: string
    ReqReplacePathPrefix:
      type: object
      properties:
        schema:
          type: string
        roleName:
          type: string
        oldSystemId:
          type: string
        newSystemId:
          type: string
        oldPrefix:
          type: string
        newPrefix:
          type: string
    RespAuthorized:
      type: object
      properties:
        isAuthorized:
          type: boolean
    ReqUserHasRole:
      type: object
      properties:
        user:
          type: string
        roleName:
          type: string
    ReqRemoveUserRole:
      type: object
      properties:
        user:
          type: string
        roleName:
          type: string
    ReqGrantUserRole:
      type: object
      properties:
        user:
          type: string
        roleName:
          type: string
    ReqGrantUserRoleWithPermission:
      type: object
      properties:
        user:
          type: string
        roleName:
          type: string
        permSpec:
          type: string
    ReqUserHasRoleMulti:
      type: object
      properties:
        user:
          type: string
        roleNames:
          type: array
          items:
            type: string
    ReqUserIsPermitted:
      type: object
      properties:
        user:
          type: string
        permSpec:
          type: string
    ReqUserIsPermittedMulti:
      type: object
      properties:
        user:
          type: string
        permSpecs:
          type: array
          items:
            type: string
  securitySchemes:
    TapisJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
