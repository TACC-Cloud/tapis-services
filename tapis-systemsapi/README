TapisV3 Systems Web Application Notes
=======================================

------------
Introduction
------------
This is the TapisV3 Systems web application front end. It was adapted from the skeleton web service found at tapis-sampleapi.

It integrates the following facilities:

    1. JAX-RS to implement REST endpoints.
    2. JAX-RS and servlet filters.
    3. Swagger to generate openapi json and yaml dynamically and at compile time.
    4. Swagger-ui integration for serving up generated openai schema.
    5. Logback for logging.
    6. Buildnumber maven plugin to capture git information at compile time.
    7. Flyway to create database schema.
    8. Hikari for database connection pooling.
    9. io.jsonwebtoken for JWT processing.
   10. Aloe support for parameter parsing, email clients, threadlocal management,
       UUIDs, etc.

The back end may be found in tapis-systemssvc


-----------------------------
Initialize the Database
-----------------------------
Current process to create and drop the DB is to use the sql directly.
SQL files are in tapis-systemssvc/src/main/resources/sql.
First create the user "tapis_sys" From then on DB can be reset as follows:
psql -h localhost -U postgres -q -f tapis-systemssvc/src/main/resources/sql/drop.sql
psql -h localhost -U postgres -q -f tapis-systemssvc/src/main/resources/sql/V001__init.sql


???????????????????

------------
Server Usage
------------
Web applications can be controlled using these environment variables:

TAPIS_ENVONLY_ALLOW_TEST_QUERY_PARMS - allow test-only values sent as query parameters
TAPIS_ENVONLY_JWT_OPTIONAL - set to true to skip jwt processing
TAPIS_ENVONLY_KEYSTORE_PASSWORD - password to unlock jwt private signing key
TAPIS_ENVONLY_SKIP_JWT_VERIFY - set to true to skip jwt signature verification
TAPIS_REQUEST_LOGGING_FILTER_PREFIXES - set url prefixes that log each request

See the TapisEnv class for an explanation of how to use these parameters and for the
complete listing of all possible Tapis parameters.  For example, to not require a jwt
in a request and to log all requests, set the following parameters when starting the 
server:
 
        tapis.envonly.jwt.optional = true
        tapis.request.logging.filter.prefixes = /systems/v3.  
        
Note that if jwt content is required to execute requests, that information can be passed 
in request query parameters when tapis.envonly.allow.test.query.parms = true.

The web application is packaged as a WAR file.  Configure your web application
server, such as Tomcat, with the systems.war file.  Start your web application server 
after setting the above environment variables to control the web application.

------------
Client Usage
------------
*** From Browser, enter these urls to execute application endpoints:

- Show index.html
    http://localhost:8080/systems/v3
    
- Run GET on hello method
    http://localhost:8080/sample/v3/hello
    
- Run GET on first record in sample table (after posting data--see below)
http://localhost:8080/sample/v3/1?pretty=true 

- Run GET for all records in sample table (after posting data--see below)
http://localhost:8080/sample/v3?pretty=true 

*** From command line, run these commands to POST and GET samples:
  
- Create sample record
    curl -X POST --data '{"text":"aaa"}' 'http://localhost:8080/sample/v3/?pretty=true'
- Retrieve first sample
    curl http://localhost:8080/sample/v3/1?pretty=true
- Retrieve all samples
    curl http://localhost:8080/sample/v3?pretty=true
    

------------------------------------------------------------------------------
Generating and viewing openapi spec
------------------------------------------------------------------------------
*** From Browser, enter these urls to generate the openapi definition of the sample interface:
http://localhost:8080/systems/v3/openapi.json
http://localhost:8080/systems/v3/openapi.yaml
*** From Browser, enter this url to view the definition via swagger-ui
http://localhost:8080/systems/swagger-ui

-------------------------------------------------------------------
Creating a run configuration for the front end server in IntelliJ
-------------------------------------------------------------------
Configure Run configuration in IntelliJ
  Run->Edit Configurations
  Click "+" and select Tomcat Server->Local
  On Server tab:
    Uncheck "Open browser" if desired
  On Deployment tab:
    Click "+" and select "tapis-systemsapi:war"
    Edit "Application context:" to be "/systems"
  On Startup/Connection tab:
    For "Run" and "Debug" add following Environment Variables
      Name                                  Value
      ---------------------------------------------
      TAPIS_ENVONLY_ALLOW_TEST_QUERY_PARMS  TRUE
      TAPIS_ENVONLY_JWT_OPTIONAL            TRUE
      TAPIS_ENVONLY_SKIP_JWT_VERIFY         TRUE
      TAPIS_REQUEST_LOGGING_FILTER_PREFIXES /systems/v3

