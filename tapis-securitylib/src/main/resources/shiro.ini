[main]

# ---------- Database Datasources ----------
# For illustration purposes, we configure different datasources
# to the SA database.  The example include the simple postgres 
# datasource plus two connection caching datasources.

# Simple postgres datasource configuration.
#dataSource = org.postgresql.ds.PGSimpleDataSource
#dataSource.serverName = localhost
#dataSource.portNumber = 5432 
#dataSource.databaseName = shiroauthdb

# c3p0 datasource configuration.
#dataSource = com.mchange.v2.c3p0.ComboPooledDataSource
#dataSource.driverClass = org.postgresql.Driver
#dataSource.jdbcUrl = jdbc:postgresql://localhost:5432/shiroauthdb

# Hikari datasource configuration.
dataSource = com.zaxxer.hikari.HikariDataSource
dataSource.jdbcUrl = jdbc:postgresql://localhost:5432/shiroauthdb
dataSource.maximumPoolSize = 6
dataSource.username = shiroauth

# Common to most datasources.
#   - user is not common to Hikari
#dataSource.user = shiroauth
dataSource.password = x
# ---------- Database Datasources END ------

# Create JDBC realm.
saJdbcRealm = net.magneticpotato.shirojdbc.shiro.SAJdbcRealm
saJdbcRealm.dataSource = $dataSource
saJdbcRealm.permissionsLookupEnabled = true

# Explicitly assign the active realms to the security 
# manager as recommended in Shiro documentation.
securityManager.realms = $saJdbcRealm

# Create the hashing service.
hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-512
hashService.privateSalt = IU9LX1RyeV8rdG8rX0d1ZXNzX3RoaXMlMzkj
hashService.generatePublicSalt = true

# Password service configuration
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService

# Password matcher configuration 
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService
 
# Realm configuration for password matching
saJdbcRealm.credentialsMatcher = $passwordMatcher