package edu.utexas.tacc.aloe.shared.uuid;

import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.utexas.tacc.aloe.shared.exceptions.AloeUUIDException;
import edu.utexas.tacc.aloe.shared.exceptions.runtime.AloeRuntimeException;
import edu.utexas.tacc.aloe.shared.i18n.MsgUtils;

public final class AloeUUID 
{
    /* ********************************************************************** */
    /*                               Constants                                */
    /* ********************************************************************** */
    // Tracing.
    private static final Logger _log = LoggerFactory.getLogger(AloeUUID.class);
    
    // Get the fixed length of a uuid, which is 36 from the random part, 
    // 1 from a hypen, and 3 from the Aloe type code. 
    private static final int _uuidFixedLen = UUID.randomUUID().toString().length() + 4;
	
	/* **************************************************************************** */
	/*                                    Fields                                    */
	/* **************************************************************************** */
	private String   uniqueId;
	private UUIDType resourceType;
	
	/* **************************************************************************** */
	/*                                 Constructors                                 */
	/* **************************************************************************** */
	public AloeUUID(UUIDType type) 
	{
		// Throw a runtime exception in the odd case that this happens.
		if (type == null) {
			String msg = MsgUtils.getMsg("ALOE_UUID_NULL_TYPE");
			_log.error(msg);
			throw new AloeRuntimeException(msg);
		}
			
		// Fill in the components of this uuid.
		this.resourceType = type;
		this.uniqueId = UUID.randomUUID().toString();
	}
	
	public AloeUUID(String uuid) throws AloeUUIDException 
	{
		// Sanity check.  The uuid is expected to be one that was 
		// generated by the toString() method of this class.
		if (StringUtils.isBlank(uuid) || uuid.length() != _uuidFixedLen) {
			String msg = MsgUtils.getMsg("ALOE_UUID_DECOMPOSE_ERROR", uuid);
			_log.error(msg);
			throw new AloeRuntimeException(msg);
		}
		
		// Decompose the uuid string.
		setResourceType(uuid.substring(uuid.lastIndexOf("-")+1));
		setUniqueId(uuid.substring(0, uuid.lastIndexOf("-")));
	}
	
  /* ********************************************************************** */
  /*                             Public Methods                             */
  /* ********************************************************************** */
  /* ---------------------------------------------------------------------- */
  /* getUniqueId:                                                           */
  /* ---------------------------------------------------------------------- */
	public String getUniqueId(){return uniqueId;}

  /* ---------------------------------------------------------------------- */
  /* setUniqueId:                                                           */
  /* ---------------------------------------------------------------------- */
	public void setUniqueId(String uniqueId){this.uniqueId = uniqueId;}

  /* ---------------------------------------------------------------------- */
  /* getResourceType:                                                       */
  /* ---------------------------------------------------------------------- */
	public UUIDType getResourceType(){return resourceType;}

  /* ---------------------------------------------------------------------- */
  /* setResourceType:                                                       */
  /* ---------------------------------------------------------------------- */
	public void setResourceType(String resourceType) throws AloeUUIDException
	{
		// Nulls not allowed.
		if (StringUtils.isBlank(resourceType)) { 
			String msg = MsgUtils.getMsg("ALOE_NULL_PARAMETER", "setResourceType", "resourceType");
			_log.error(msg);
			throw new AloeUUIDException(msg);
		}
		
		// This call can throw an exception.
		this.resourceType = UUIDType.getInstance(resourceType.toUpperCase());
	}
	
  /* ---------------------------------------------------------------------- */
  /* setResourceType:                                                       */
  /* ---------------------------------------------------------------------- */
	public void setResourceType(UUIDType objectType) throws AloeUUIDException
	{
		// Nulls not allowed.
		if (objectType == null) { 
			String msg = MsgUtils.getMsg("ALOE_NULL_PARAMETER", "setResourceType", "objectType");
			_log.error(msg);
			throw new AloeUUIDException(msg);
		}
		
		this.resourceType = objectType;
	}

  /* ---------------------------------------------------------------------- */
  /* toString:                                                              */
  /* ---------------------------------------------------------------------- */
	public String toString() 
	{
		return uniqueId + "-" + resourceType.getCode();
	}
}
