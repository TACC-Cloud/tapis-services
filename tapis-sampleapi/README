Tapis Sample Web Application Notes
==================================

Introduction
-----------
This sample web application can be used as a skeleton or prototype for actual Tapis web services.
The prototype has the following characteristics:

    1. Uses JAX-RS to implement endpoints.
    2. Uses swagger to dyamically provide openapi json and yaml.
    3. Uses logback logging. 
    4. Captures compile-time information in resource files.
    5. The build generates a war file (likely to change soon).
    6. Uses both JAR-RS and servlet filters from tapis-sharedapi.


Server Usage
------------
Web applications can be controlled using these environment variables:

tapis.envonly.allow.test.query.parms - allow test-only values sent as query parameters
tapis.envonly.jwt.optional - set to true to skip jwt processing
tapis.envonly.keystore.password - password to unlock jwt private signing key
tapis.envonly.skip.jwt.verify - set to true to skip jwt signature verification
tapis.request.logging.filter.prefixes - set url prefixes that log each request

See the TapisEnv class for an explanation of how to use these parameters and for the
complete listing of all possible Tapis parameters.  For example, to not require a jwt
in a request and to log all requests, set the following parameters when starting the 
server:
 
        tapis.envonly.jwt.optional = true
        tapis.request.logging.filter.prefixes = /tapis-sampleapi/v3.  
        
Note that if jwt content is required to execute requests, that information can be passed 
in request query parameters when tapis.envonly.allow.test.query.parms = true.

Start the web application standalone or in an IDE setting any environment variables that
you need.


Client Usage
------------
From Browser, enter these urls to execute application endpoints:

http://localhost:8080/sample 
    - Shows index.html
http://localhost:8080/sample/v3/hello
    - Runs GET on hello method
    
From Browser, enter these urls to generate the openapi definition of the sample interface:

http://localhost:8080/sample/v3/openapi.json
http://localhost:8080/sample/v3/openapi.yaml


Creating from Scratch in Eclipse
--------------------------------
There are many paths to creating a project in Eclipse, but only some of them work for a given
application.  Our web application uses JAX-RS, so the ordering of actions during creation is 
critical.  Here's one recipe that works.

1. Create a new maven project with no archetype.
    - Edit pom.xml to make it look like the one in tapis-sampleapi.
2. Right click the project name in the Navigator.
    - Select Properties->Project Facets
    - Click the "convert to a facets project" link.
    - Select the JavaScript, Dynamic Web Module, JAX-RS facets in addition to the Java
        - Java -> version 12 or higher
        - Dynamic Web Module -> version 4.0 or higher
        - JAX-RS -> version 2.1 or higher 
    - Save
3. Right click the project name in the Navigator.
    - Select Properties->Deployment Assembly
    - Press Add
    - Select Maven Dependencies
    - Save
4. Make sure the web.xml in WebContent/WEB-INF references the Jersey servlet.
5. Create an index.html file in WebContent directory.
6. The context root will be tapis-sampleapi by default.  Change the by right clicking the
   project name, then Properties->Web Context Settings and setting the Context Root.
    - Making the context root and the war file name (finalName in pom) the same will 
      probably make life easier. 
 